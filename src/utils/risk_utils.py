import os
import logging
from dotenv import load_dotenv
from typing import Dict, Tuple, Optional, Union

# Load environment variables
load_dotenv()

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Default risk parameters (can be overridden in .env)
DEFAULT_RISK_PERCENT = float(os.getenv('DEFAULT_RISK_PERCENT', '1.0'))  # 1% risk per trade by default
DEFAULT_RISK_REWARD_RATIO = float(os.getenv('DEFAULT_RISK_REWARD_RATIO', '2.0'))  # 1:2 risk:reward ratio
MAX_RISK_PERCENT = float(os.getenv('MAX_RISK_PERCENT', '2.0'))  # Max 2% risk per trade

def calculate_stop_loss(entry_price: float, risk_percent: float, is_long: bool) -> float:
    """
    ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏∏‡∏î Stop Loss ‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤ ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ
    
    Args:
        entry_price: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏ã‡∏∑‡πâ‡∏≠/‡∏Ç‡∏≤‡∏¢
        risk_percent: ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ (‡πÄ‡∏ä‡πà‡∏ô 1.0 = 1%)
        is_long: True ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠ (Long), False ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢ (Short)
    
    Returns:
        ‡∏£‡∏≤‡∏Ñ‡∏≤ Stop Loss ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    """
    if risk_percent > MAX_RISK_PERCENT:
        logger.warning(f"Risk percent {risk_percent}% exceeds maximum allowed {MAX_RISK_PERCENT}%. Using maximum.")
        risk_percent = MAX_RISK_PERCENT
    
    if is_long:
        # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Long position, Stop Loss ‡∏≠‡∏¢‡∏π‡πà‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤
        return entry_price * (1 - risk_percent / 100)
    else:
        # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Short position, Stop Loss ‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤
        return entry_price * (1 + risk_percent / 100)

def calculate_take_profit(entry_price: float, risk_reward_ratio: float, stop_loss: float, is_long: bool) -> float:
    """
    ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏∏‡∏î Take Profit ‡∏à‡∏≤‡∏Å Risk:Reward Ratio
    
    Args:
        entry_price: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏ã‡∏∑‡πâ‡∏≠/‡∏Ç‡∏≤‡∏¢
        risk_reward_ratio: ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≠‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô (‡πÄ‡∏ä‡πà‡∏ô 2.0 = 1:2)
        stop_loss: ‡∏£‡∏≤‡∏Ñ‡∏≤ Stop Loss
        is_long: True ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠ (Long), False ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢ (Short)
    
    Returns:
        ‡∏£‡∏≤‡∏Ñ‡∏≤ Take Profit ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    """
    risk = abs(entry_price - stop_loss)
    reward = risk * risk_reward_ratio
    
    if is_long:
        # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Long position, Take Profit ‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤
        return entry_price + reward
    else:
        # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Short position, Take Profit ‡∏≠‡∏¢‡∏π‡πà‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤
        return entry_price - reward

def calculate_position_size(account_balance: float, risk_amount: float, 
                           entry_price: float, stop_loss: float, pip_value: float = 0.1) -> float:
    """
    ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î position ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ï‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å risk management
    
    Args:
        account_balance: ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
        risk_amount: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î (‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ)
        entry_price: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏ã‡∏∑‡πâ‡∏≠/‡∏Ç‡∏≤‡∏¢
        stop_loss: ‡∏£‡∏≤‡∏Ñ‡∏≤ Stop Loss
        pip_value: ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≠ pip (default 0.1 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö forex standard lot)
    
    Returns:
        ‡∏Ç‡∏ô‡∏≤‡∏î lot ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    """
    # ‡∏ñ‡πâ‡∏≤ risk_amount ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå (‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 100)
    if risk_amount < 100:
        risk_amount = account_balance * (risk_amount / 100)
    
    # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô pips ‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
    pips_at_risk = abs(entry_price - stop_loss) / pip_value
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î lot
    if pips_at_risk > 0:
        lot_size = risk_amount / pips_at_risk
        return round(lot_size, 2)  # ‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏©‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 2 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
    return 0.0

def calculate_risk_metrics(entry_price: float, account_balance: float, 
                          risk_percent: float = DEFAULT_RISK_PERCENT,
                          risk_reward_ratio: float = DEFAULT_RISK_REWARD_RATIO,
                          is_long: bool = True,
                          pip_value: float = 0.1) -> Dict[str, Union[float, str]]:
    """
    ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì metrics ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
    
    Args:
        entry_price: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏ã‡∏∑‡πâ‡∏≠/‡∏Ç‡∏≤‡∏¢
        account_balance: ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
        risk_percent: ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ (default: 1%)
        risk_reward_ratio: ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≠‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô (default: 2.0 = 1:2)
        is_long: True ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠ (Long), False ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢ (Short)
        pip_value: ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≠ pip
    
    Returns:
        Dictionary ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
    """
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Stop Loss
    stop_loss = calculate_stop_loss(entry_price, risk_percent, is_long)
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Take Profit
    take_profit = calculate_take_profit(entry_price, risk_reward_ratio, stop_loss, is_long)
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
    risk_amount = account_balance * (risk_percent / 100)
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î position
    position_size = calculate_position_size(account_balance, risk_amount, entry_price, stop_loss, pip_value)
    
    # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô pips ‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
    pips_at_risk = abs(entry_price - stop_loss) / pip_value
    
    # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô pips ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
    target_pips = abs(entry_price - take_profit) / pip_value
    
    return {
        'entry_price': entry_price,
        'stop_loss': stop_loss,
        'take_profit': take_profit,
        'position_type': 'LONG' if is_long else 'SHORT',
        'risk_percent': risk_percent,
        'risk_amount': risk_amount,
        'risk_reward_ratio': risk_reward_ratio,
        'position_size': position_size,
        'pips_at_risk': pips_at_risk,
        'target_pips': target_pips,
        'potential_profit': risk_amount * risk_reward_ratio,
        'account_balance': account_balance
    }

def format_risk_report(risk_metrics: Dict[str, Union[float, str]]) -> str:
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    
    Args:
        risk_metrics: Dictionary ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á (‡∏à‡∏≤‡∏Å calculate_risk_metrics)
    
    Returns:
        ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
    """
    return f"""
üìä Risk Management Report:
üîπ Position: {risk_metrics['position_type']}
üîπ Entry Price: {risk_metrics['entry_price']:.5f}
üõë Stop Loss: {risk_metrics['stop_loss']:.5f}
üéØ Take Profit: {risk_metrics['take_profit']:.5f}
üìà Risk/Reward: 1:{risk_metrics['risk_reward_ratio']}

üí∞ Account: ${risk_metrics['account_balance']:.2f}
‚ö†Ô∏è Risk: {risk_metrics['risk_percent']:.2f}% (${risk_metrics['risk_amount']:.2f})
üíµ Position Size: {risk_metrics['position_size']:.2f} lots
üìè Pips at Risk: {risk_metrics['pips_at_risk']:.1f}
üìè Target Pips: {risk_metrics['target_pips']:.1f}
üí∏ Potential Profit: ${risk_metrics['potential_profit']:.2f}
"""

# Example usage
if __name__ == "__main__":
    # Test the functions
    entry_price = 1.10000  # Example entry price for EUR/USD
    account_balance = 10000  # Example account balance
    
    # Calculate risk metrics for a LONG position
    long_metrics = calculate_risk_metrics(
        entry_price=entry_price,
        account_balance=account_balance,
        risk_percent=1.0,
        risk_reward_ratio=2.0,
        is_long=True
    )
    
    # Print the risk report
    print(format_risk_report(long_metrics))
