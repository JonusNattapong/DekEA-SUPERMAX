import requests
import os
from dotenv import load_dotenv
import time

# Load environment variables first
load_dotenv()

DEEPSEEK_API_KEY = os.getenv('DEEPSEEK_API_KEY')
MISTRAL_API_KEY = os.getenv('MISTRAL_API_KEY')


def ai_call(prompt: str, task: str = "general") -> str:
    """
    ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ AI API ‡πÇ‡∏î‡∏¢‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ DeepSeek ‡∏Å‡πà‡∏≠‡∏ô ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ Mistral ‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≥‡∏£‡∏≠‡∏á
    """
    result = deepseek_api_call(prompt, task)

    if result and result.startswith("[DeepSeek API error"):
        print("üîÑ Falling back to Mistral API...")
        return mistral_api_call(prompt, task)

    return result


def mistral_api_call(prompt: str, task: str = "general") -> str:
    """
    ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Mistral API ‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≥‡∏£‡∏≠‡∏á
    """
    if not MISTRAL_API_KEY:
        return f"[Mistral API error: API key not found]"

    url = "https://api.mistral.ai/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {MISTRAL_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": "mistral-small-latest",
        "messages": [
            {"role": "user", "content": prompt}
        ],
        "max_tokens": 500,
        "temperature": 0.2
    }

    try:
        resp = requests.post(url, headers=headers, json=data, timeout=20)
        resp.raise_for_status()
        result = resp.json()
        return result["choices"][0]["message"]["content"].strip()
    except requests.exceptions.HTTPError as e:
        print(f"[Mistral API error]: {e}")
        return f"[Mistral API error: {e}]"
    except Exception as e:
        print(f"[Mistral API error]: {e}")
        return f"[Mistral API error: {e}]"


def deepseek_api_call(prompt: str, task: str = "general") -> str:
    """
    ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å DeepSeek API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡∏• ‡∏™‡∏£‡∏∏‡∏õ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå ‡∏Ø‡∏•‡∏Ø ‡πÅ‡∏ö‡∏ö Agentic
    task: "translate", "summarize", "decision", "general"
    """
    if not DEEPSEEK_API_KEY:
        return f"[DeepSeek API error: API key not found in environment variables]"

    url = "https://api.deepseek.com/chat/completions"
    headers = {
        "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
        "Content-Type": "application/json"
    }
    messages = [
        {"role": "system", "content": f"Task: {task}"},
        {"role": "user", "content": prompt}
    ]
    data = {
        "model": "deepseek-chat",
        "messages": messages,
        "temperature": 0.2
    }

    try:
        resp = requests.post(url, headers=headers, json=data, timeout=20)
        resp.raise_for_status()
        result = resp.json()
        return result["choices"][0]["message"]["content"].strip()
    except requests.exceptions.HTTPError as e:
        if e.response.status_code == 401:
            print(f"[DeepSeek API error]: 401 Unauthorized - Invalid API key")
            return f"[DeepSeek API error: Invalid API key]"
        else:
            print(f"[DeepSeek API error]: {e}")
            return f"[DeepSeek API error: {e}]"
    except Exception as e:
        print(f"[DeepSeek API error]: {e}")
        return f"[DeepSeek API error: {e}]"


def summarize_text(text: str) -> str:
    """
    ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πà‡∏≤‡∏ß‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏î‡πâ‡∏ß‡∏¢ AI API (DeepSeek ‡∏´‡∏£‡∏∑‡∏≠ Mistral)
    """
    prompt = f"‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πà‡∏≤‡∏ß‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡∏î‡πâ‡∏ß‡∏¢‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á 2 ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ:\n{text}"
    return ai_call(prompt, task="summarize")


def sentiment_analysis(text: str) -> str:
    """
    ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå sentiment (Bullish, Bearish, Neutral) ‡∏î‡πâ‡∏ß‡∏¢ AI API (DeepSeek ‡∏´‡∏£‡∏∑‡∏≠ Mistral)
    """
    prompt = (
        "‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏ô‡∏µ‡πâ‡∏´‡∏ô‡πà‡∏≠‡∏¢ "
        "‡∏ï‡∏≠‡∏ö‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏≥‡πÄ‡∏î‡∏µ‡∏¢‡∏ß: Bullish (‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏ß‡∏Å), Bearish (‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏ö), ‡∏´‡∏£‡∏∑‡∏≠ Neutral (‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏≤‡∏á)\n"
        f"‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: {text}"
    )
    return ai_call(prompt, task="sentiment")


FINNHUB_API_KEY = os.getenv('FINNHUB_API_KEY')


def translate_text(text: str) -> str:
    """
    ‡πÅ‡∏õ‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‚Üí‡πÑ‡∏ó‡∏¢ ‡∏î‡πâ‡∏ß‡∏¢ AI API (DeepSeek ‡∏´‡∏£‡∏∑‡∏≠ Mistral)
    """
    prompt = f"‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏õ‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ô‡∏∞ ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥ ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢:\n{text}"
    return ai_call(prompt, task="translate")


def generate_strategy(news_text: str) -> str:
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á investment strategy ‡∏à‡∏≤‡∏Å‡∏Ç‡πà‡∏≤‡∏ß‡∏î‡πâ‡∏ß‡∏¢ AI API (DeepSeek ‡∏´‡∏£‡∏∑‡∏≠ Mistral)
    """
    prompt = (
        "‡∏à‡∏≤‡∏Å‡∏Ç‡πà‡∏≤‡∏ß‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ ‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥ "
        "‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© 2-3 ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ ‡πÅ‡∏•‡∏∞‡πÄ‡∏ô‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∏‡∏î‡∏¢‡∏∑‡∏ô‡πÉ‡∏ô‡∏ï‡∏•‡∏≤‡∏î\n"
        f"‡∏Ç‡πà‡∏≤‡∏ß: {news_text}"
    )
    return ai_call(prompt, task="strategy")


def get_latest_news() -> str | None:
    """‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å Finnhub API ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å"""
    if not FINNHUB_API_KEY:
        raise ValueError('Missing FINNHUB_API_KEY in environment variables')

    url = f'https://finnhub.io/api/v1/news?category=general&token={FINNHUB_API_KEY}'
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        news_list = response.json()
        if isinstance(news_list, list) and news_list:
            latest = news_list[0]
            headline = latest.get('headline', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ç‡πà‡∏≤‡∏ß')
            summary = latest.get('summary', '')
            news_url = latest.get('url', '')

            # ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πà‡∏≤‡∏ß (EN/TH)
            summary_en_short = summarize_text(summary)
            summary_th_short = translate_text(summary_en_short)

            # ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏à‡∏≤‡∏Å‡∏Ç‡πà‡∏≤‡∏ß
            strategy_en = generate_strategy(summary)
            strategy_th = translate_text(strategy_en)

            # ‡πÅ‡∏õ‡∏• headline ‡πÅ‡∏•‡∏∞ summary
            headline_th = translate_text(headline)
            summary_th = translate_text(summary)            news_message = (
                f"üì∞ ‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {headline_th}\n\n"
                f"üîç ‡∏™‡∏£‡∏∏‡∏õ: {summary_th_short}\n\n"
                f"üí° ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå: {strategy_th}\n\n"
                f"üìù ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏ï‡πá‡∏°: {summary_th}\n\n"
                f"üîó ‡∏≠‡πà‡∏≤‡∏ô‡∏ï‡πà‡∏≠: {news_url}"
            )
            return news_message
        return None
    except Exception as e:
        print(f'Error fetching news: {e}')
        return None
