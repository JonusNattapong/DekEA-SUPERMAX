"""
Performance Reporter - ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô Winrate ‡∏ú‡πà‡∏≤‡∏ô Telegram ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
"""

import os
import asyncio
import schedule
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import logging
from src.performance.performance_tracker import PerformanceTracker, PeriodStats
from src.performance.performance_trading_monitor import TradingMonitor
from src.utils.telegram_utils import send_message_to_telegram

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class PerformanceReporter:
    """‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ú‡πà‡∏≤‡∏ô Telegram"""
    
    def __init__(self, monitor: TradingMonitor, auto_schedule: bool = True):
        """
        Initialize Performance Reporter
        
        Args:
            monitor: TradingMonitor instance
            auto_schedule: ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        """
        self.monitor = monitor
        self.tracker = monitor.tracker
        
        if auto_schedule:
            self._setup_scheduled_reports()
    
    def send_daily_summary(self) -> None:
        """‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô"""
        summary = self.monitor.get_daily_summary()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        message = self._format_daily_summary(summary)
        
        try:
            send_message_to_telegram(message)
            logger.info("‚úÖ ‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ú‡πà‡∏≤‡∏ô Telegram ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        except Exception as e:
            logger.error(f"‚ùå Error sending daily summary: {e}")
    
    def send_weekly_report(self) -> None:
        """‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå"""
        weekly_reports = self.tracker.get_weekly_report(4)  # 4 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
        
        if not weekly_reports:
            logger.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå")
            return
        
        message = self._format_weekly_report(weekly_reports)
        
        try:
            send_message_to_telegram(message)
            logger.info("‚úÖ ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ú‡πà‡∏≤‡∏ô Telegram ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        except Exception as e:
            logger.error(f"‚ùå Error sending weekly report: {e}")
    
    def send_monthly_report(self) -> None:
        """‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"""
        monthly_reports = self.tracker.get_monthly_report(3)  # 3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
        
        if not monthly_reports:
            logger.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")
            return
        
        message = self._format_monthly_report(monthly_reports)
        
        try:
            send_message_to_telegram(message)
            logger.info("‚úÖ ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô Telegram ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        except Exception as e:
            logger.error(f"‚ùå Error sending monthly report: {e}")
    
    def send_trade_alert(self, trade_id: str, action: str, details: Dict) -> None:
        """
        ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
        
        Args:
            trade_id: ‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
            action: ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥ ('OPEN', 'CLOSE', 'UPDATE')
            details: ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
        """
        message = self._format_trade_alert(trade_id, action, details)
        
        try:
            send_message_to_telegram(message)
            logger.info(f"‚úÖ ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î {action} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        except Exception as e:
            logger.error(f"‚ùå Error sending trade alert: {e}")
    
    def _format_daily_summary(self, summary: Dict) -> str:
        """‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô"""
        date = summary['date']
        total_trades = summary['total_trades']
        winrate = summary['winrate']
        total_pnl = summary['total_pnl']
        active_trades = summary['active_trades']
        
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å emoji ‡∏ï‡∏≤‡∏° winrate
        if winrate >= 70:
            winrate_emoji = "üî•"
        elif winrate >= 50:
            winrate_emoji = "‚úÖ"
        elif winrate > 0:
            winrate_emoji = "‚ö†Ô∏è"
        else:
            winrate_emoji = "‚ùå"
        
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å emoji ‡∏ï‡∏≤‡∏° PnL
        if total_pnl > 0:
            pnl_emoji = "üí∞"
        elif total_pnl < 0:
            pnl_emoji = "üìâ"
        else:
            pnl_emoji = "‚öñÔ∏è"
        
        message = f"""
üìä **‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô**
üóìÔ∏è ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {date}

üìà **‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ**
üî¢ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_trades}
{winrate_emoji} Winrate: {winrate:.1f}%
{pnl_emoji} PnL ‡∏£‡∏ß‡∏°: {total_pnl:.2f}
üîì ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà: {active_trades}
"""
        
        if total_trades > 0:
            winning_trades = summary['winning_trades']
            losing_trades = summary['losing_trades']
            avg_win = summary.get('avg_win', 0)
            avg_loss = summary.get('avg_loss', 0)
            largest_win = summary.get('largest_win', 0)
            largest_loss = summary.get('largest_loss', 0)
            
            message += f"""
üèÜ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏µ‡πà‡∏ä‡∏ô‡∏∞: {winning_trades}
‚ùå ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏û‡πâ: {losing_trades}
üìä ‡∏Å‡∏≥‡πÑ‡∏£‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {avg_win:.2f}
üìâ ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {avg_loss:.2f}
üéØ ‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: {largest_win:.2f}
‚ö° ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: {largest_loss:.2f}
"""
        
        message += f"\n‚è∞ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô ‡∏ì ‡πÄ‡∏ß‡∏•‡∏≤: {datetime.now().strftime('%H:%M:%S')}"
        
        return message.strip()
    
    def _format_weekly_report(self, weekly_reports: List[PeriodStats]) -> str:
        """‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå"""
        message = f"""
üìÖ **‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå**
üïê ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: {datetime.now().strftime('%d/%m/%Y %H:%M')}

"""
        
        for i, week in enumerate(weekly_reports):
            if i >= 4:  # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 4 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                break
            
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î emoji ‡∏ï‡∏≤‡∏° winrate
            if week.winrate >= 70:
                emoji = "üî•"
            elif week.winrate >= 50:
                emoji = "‚úÖ"
            elif week.winrate > 0:
                emoji = "‚ö†Ô∏è"
            else:
                emoji = "‚ùå"
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏Å‡πà‡∏≠‡∏ô
            trend = ""
            if i < len(weekly_reports) - 1:
                prev_winrate = weekly_reports[i + 1].winrate
                if week.winrate > prev_winrate:
                    trend = "üìà"
                elif week.winrate < prev_winrate:
                    trend = "üìâ"
                else:
                    trend = "‚û°Ô∏è"
            
            message += f"""
{emoji} **‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà {i + 1}** {trend}
üìä ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î: {week.total_trades} | Winrate: {week.winrate:.1f}%
üí∞ PnL: {week.total_pnl:.2f} | PF: {week.profit_factor:.2f}
üèÜ ‡∏ä‡∏ô‡∏∞: {week.winning_trades} | ‚ùå ‡πÅ‡∏û‡πâ: {week.losing_trades}

"""
        
        return message.strip()
    
    def _format_monthly_report(self, monthly_reports: List[PeriodStats]) -> str:
        """‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"""
        message = f"""
üìÜ **‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô**
üïê ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: {datetime.now().strftime('%d/%m/%Y %H:%M')}

"""
        
        for i, month in enumerate(monthly_reports):
            if i >= 3:  # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                break
            
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î emoji ‡∏ï‡∏≤‡∏° winrate
            if month.winrate >= 70:
                emoji = "üî•"
            elif month.winrate >= 50:
                emoji = "‚úÖ"
            elif month.winrate > 0:
                emoji = "‚ö†Ô∏è"
            else:
                emoji = "‚ùå"
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô
            trend = ""
            if i < len(monthly_reports) - 1:
                prev_winrate = monthly_reports[i + 1].winrate
                if month.winrate > prev_winrate:
                    trend = "üìà"
                elif month.winrate < prev_winrate:
                    trend = "üìâ"
                else:
                    trend = "‚û°Ô∏è"
            
            message += f"""
{emoji} **{month.period}** {trend}
üìä ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {month.total_trades}
üéØ Winrate: {month.winrate:.1f}%
üí∞ PnL ‡∏£‡∏ß‡∏°: {month.total_pnl:.2f}
üìà Profit Factor: {month.profit_factor:.2f}
üìâ Max Drawdown: {month.max_drawdown:.2f}
üèÜ ‡∏ä‡∏ô‡∏∞: {month.winning_trades} | ‚ùå ‡πÅ‡∏û‡πâ: {month.losing_trades}
üíé ‡∏Å‡∏≥‡πÑ‡∏£‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {month.avg_win:.2f}
‚ö° ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {month.avg_loss:.2f}
üî• ‡∏ä‡∏ô‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: {month.consecutive_wins}
‚ùÑÔ∏è ‡πÅ‡∏û‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: {month.consecutive_losses}

"""
        
        return message.strip()
    
    def _format_trade_alert(self, trade_id: str, action: str, details: Dict) -> str:
        """‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î"""
        if action == "OPEN":
            symbol = details.get('symbol', 'N/A')
            position_type = details.get('position_type', 'N/A')
            entry_price = details.get('entry_price', 0)
            position_size = details.get('position_size', 0)
            strategy = details.get('strategy_name', 'N/A')
            
            emoji = "üü¢" if position_type == "LONG" else "üî¥"
            
            message = f"""
{emoji} **‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß**

üÜî Trade ID: {trade_id}
üíπ Symbol: {symbol}
üìç Position: {position_type}
üí∞ Entry Price: {entry_price}
üìä Size: {position_size}
üéØ Strategy: {strategy}
‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
"""
            
            if details.get('stop_loss'):
                message += f"\nüõë Stop Loss: {details['stop_loss']}"
            if details.get('take_profit'):
                message += f"\nüéØ Take Profit: {details['take_profit']}"
        
        elif action == "CLOSE":
            exit_price = details.get('exit_price', 0)
            pnl = details.get('pnl', 0)
            pnl_percentage = details.get('pnl_percentage', 0)
            exit_reason = details.get('exit_reason', 'Manual')
            
            emoji = "‚úÖ" if pnl > 0 else "‚ùå"
            pnl_emoji = "üí∞" if pnl > 0 else "üìâ"
            
            message = f"""
{emoji} **‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß**

üÜî Trade ID: {trade_id}
üí∞ Exit Price: {exit_price}
{pnl_emoji} PnL: {pnl:.2f} ({pnl_percentage:.2f}%)
üìù ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: {exit_reason}
‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
"""
        
        else:  # UPDATE
            message = f"""
üîÑ **‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î**

üÜî Trade ID: {trade_id}
üìù ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á: {details.get('changes', 'N/A')}
‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
"""
        
        return message.strip()
    
    def _setup_scheduled_reports(self) -> None:
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
        # ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô - ‡∏™‡πà‡∏á‡πÄ‡∏ß‡∏•‡∏≤ 18:00 ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô
        schedule.every().day.at("18:00").do(self.send_daily_summary)
        
        # ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå - ‡∏™‡πà‡∏á‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå ‡πÄ‡∏ß‡∏•‡∏≤ 19:00
        schedule.every().sunday.at("19:00").do(self.send_weekly_report)
        
        # ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô - ‡∏™‡πà‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1 ‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡πÄ‡∏ß‡∏•‡∏≤ 20:00
        schedule.every().month.do(self._check_monthly_report)
        
        logger.info("‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    
    def _check_monthly_report(self) -> None:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1"""
        if datetime.now().day == 1:
            self.send_monthly_report()
    
    def run_scheduler(self) -> None:
        """‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ scheduler (‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö background)"""
        logger.info("üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Performance Reporter Scheduler")
        
        while True:
            schedule.run_pending()
            time.sleep(60)  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡∏ô‡∏≤‡∏ó‡∏µ

# Enhanced TradingMonitor with automatic reporting
class EnhancedTradingMonitor(TradingMonitor):
    """TradingMonitor ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
    
    def __init__(self, data_dir: str = "trading_data", enable_reporting: bool = True):
        super().__init__(data_dir)
        
        if enable_reporting:
            self.reporter = PerformanceReporter(self, auto_schedule=False)
        else:
            self.reporter = None
    
    def open_trade(self, *args, **kwargs) -> str:
        """‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô"""
        trade_id = super().open_trade(*args, **kwargs)
        
        if self.reporter and trade_id:
            # ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡πÉ‡∏´‡∏°‡πà
            trade = self.active_trades[trade_id]
            details = {
                'symbol': trade.symbol,
                'position_type': trade.position_type,
                'entry_price': trade.entry_price,
                'position_size': trade.position_size,
                'strategy_name': trade.strategy_name,
                'stop_loss': trade.stop_loss,
                'take_profit': trade.take_profit
            }
            self.reporter.send_trade_alert(trade_id, "OPEN", details)
        
        return trade_id
    
    def close_trade(self, trade_id: str, exit_price: float, exit_reason: str = "Manual") -> bool:
        """‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô"""
        # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏¥‡∏î
        trade = self.active_trades.get(trade_id)
        
        success = super().close_trade(trade_id, exit_price, exit_reason)
        
        if success and self.reporter and trade:
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì PnL
            if trade.position_type == 'LONG':
                pnl = (exit_price - trade.entry_price) * trade.position_size
            else:
                pnl = (trade.entry_price - exit_price) * trade.position_size
            
            pnl_percentage = (pnl / (trade.entry_price * trade.position_size)) * 100
            
            details = {
                'exit_price': exit_price,
                'pnl': pnl,
                'pnl_percentage': pnl_percentage,
                'exit_reason': exit_reason
            }
            self.reporter.send_trade_alert(trade_id, "CLOSE", details)
        
        return success
    
    def send_manual_report(self, report_type: str = "daily") -> None:
        """‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö manual"""
        if not self.reporter:
            logger.warning("Reporter ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            return
        
        if report_type == "daily":
            self.reporter.send_daily_summary()
        elif report_type == "weekly":
            self.reporter.send_weekly_report()
        elif report_type == "monthly":
            self.reporter.send_monthly_report()
        else:
            logger.warning(f"Report type ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö: {report_type}")

# Helper functions
def create_enhanced_monitor(data_dir: str = "trading_data", 
                          enable_reporting: bool = True) -> EnhancedTradingMonitor:
    """‡∏™‡∏£‡πâ‡∏≤‡∏á Enhanced Trading Monitor"""
    return EnhancedTradingMonitor(data_dir, enable_reporting)

if __name__ == "__main__":
    # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    monitor = create_enhanced_monitor()
    
    # ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    monitor.send_manual_report("daily")
    monitor.send_manual_report("weekly")
